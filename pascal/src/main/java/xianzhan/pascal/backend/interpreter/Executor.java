package xianzhan.pascal.backend.interpreter;

import xianzhan.pascal.backend.Backend;
import xianzhan.pascal.backend.interpreter.executor.CallDeclaredExecutor;
import xianzhan.pascal.frontend.Scanner;
import xianzhan.pascal.frontend.Source;
import xianzhan.pascal.frontend.pascal.PascalScanner;
import xianzhan.pascal.intermediate.ICode;
import xianzhan.pascal.intermediate.ICodeFactory;
import xianzhan.pascal.intermediate.ICodeNode;
import xianzhan.pascal.intermediate.SymTabEntry;
import xianzhan.pascal.intermediate.SymTabStack;
import xianzhan.pascal.intermediate.impl.ICodeKeyEnumImpl;
import xianzhan.pascal.intermediate.impl.ICodeNodeTypeEnumImpl;
import xianzhan.pascal.message.Message;
import xianzhan.pascal.message.MessageType;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.PrintWriter;

/**
 * The executor for an interpreter back end.
 *
 * @author xianzhan
 * @since 2019-05-08
 */
public class Executor extends Backend {

    protected static int                 executionCount;
    protected static RuntimeStack        runtimeStack;
    protected static RuntimeErrorHandler errorHandler;

    /**
     * Standard input
     */
    protected static Scanner     standardIn;
    /**
     * Standard output
     */
    protected static PrintWriter standardOut;

    static {
        executionCount = 0;
        runtimeStack = MemoryFactory.createRuntimeStack();
        errorHandler = new RuntimeErrorHandler();

        try {
            standardIn = new PascalScanner(
                    new Source(
                            new BufferedReader(
                                    new InputStreamReader(System.in))));
            standardOut = new PrintWriter(new PrintStream(System.out));
        } catch (IOException ignore) {

        }
    }

    public Executor() {
    }

    /**
     * Constructor for subclasses.
     *
     * @param parent the parent executor.
     */
    public Executor(Executor parent) {

    }

    /**
     * Execute the source program by processing the intermediate node
     * and the symbol table stack generated by the parser.
     *
     * @param iCode       the intermediate code.
     * @param symTabStack the symbol table.
     * @throws Exception if an error occurred.
     */
    @Override
    public void process(ICode iCode, SymTabStack symTabStack) throws Exception {

        this.symTabStack = symTabStack;

        long startTime = System.currentTimeMillis();

        SymTabEntry programId = symTabStack.getProgramId();

        // Construct an artificial CALL node to the main program.
        ICodeNode callNode = ICodeFactory.createICodeNode(ICodeNodeTypeEnumImpl.CALL);
        callNode.setAttribute(ICodeKeyEnumImpl.ID, programId);

        // Execute the main program.
        CallDeclaredExecutor callExecutor = new CallDeclaredExecutor(this);
        callExecutor.execute(callNode);

        float elapsedTime = (System.currentTimeMillis() - startTime) / 1000F;
        int runtimeErrors = RuntimeErrorHandler.getErrorCount();

        // Send the interpreter summary message.
        Message message = new Message(
                MessageType.INTERPRETER_SUMMARY,
                new Number[]{
                        executionCount,
                        runtimeErrors,
                        elapsedTime
                }
        );
        sendMessage(message);
    }

    /**
     * Return the error handler.
     *
     * @return the error handler.
     */
    public RuntimeErrorHandler getErrorHandler() {
        return errorHandler;
    }
}
