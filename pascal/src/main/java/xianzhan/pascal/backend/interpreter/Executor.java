package xianzhan.pascal.backend.interpreter;

import xianzhan.pascal.backend.Backend;
import xianzhan.pascal.backend.interpreter.executor.StatementExecutor;
import xianzhan.pascal.intermediate.ICode;
import xianzhan.pascal.intermediate.ICodeNode;
import xianzhan.pascal.intermediate.SymTabStack;
import xianzhan.pascal.message.Message;
import xianzhan.pascal.message.MessageType;

/**
 * <h1>Executor</h1>
 *
 * <p>The executor for an interpreter back end.</p>
 *
 * <p>Copyright (c) 2009 by Ronald Mak</p>
 * <p>For instructional purposes only.  No warranties.</p>
 *
 * @author Ronald Mak
 */
public class Executor extends Backend {

    protected static int                 executionCount;
    protected static RuntimeErrorHandler errorHandler;

    static {
        executionCount = 0;
        errorHandler = new RuntimeErrorHandler();
    }

    public Executor() {}

    /**
     * Constructor for subclasses.
     *
     * @param parent the parent executor.
     */
    public Executor(Executor parent) {

    }

    /**
     * Execute the source program by processing the intermediate node
     * and the symbol table stack generated by the parser.
     *
     * @param iCode       the intermediate code.
     * @param symTabStack the symbol table.
     * @throws Exception if an error occurred.
     */
    @Override
    public void process(ICode iCode, SymTabStack symTabStack) throws Exception {

        this.symTabStack = symTabStack;
        this.iCode = iCode;

        long startTime = System.currentTimeMillis();

        // Get the root node of the intermediate code and execute.
        ICodeNode rootNode = iCode.getRoot();
        StatementExecutor statementExecutor = new StatementExecutor(this);
        statementExecutor.execute(rootNode);

        float elapsedTime = (System.currentTimeMillis() - startTime) / 1000F;
        int runtimeErrors = RuntimeErrorHandler.getErrorCount();

        // Send the interpreter summary message.
        Message message = new Message(
                MessageType.INTERPRETER_SUMMARY,
                new Number[]{
                        executionCount,
                        runtimeErrors,
                        elapsedTime
                }
        );
        sendMessage(message);
    }

    /**
     * Return the error handler.
     *
     * @return the error handler.
     */
    public RuntimeErrorHandler getErrorHandler() {
        return errorHandler;
    }
}
