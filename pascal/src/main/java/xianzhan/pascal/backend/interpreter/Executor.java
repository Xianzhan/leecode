package xianzhan.pascal.backend.interpreter;

import xianzhan.pascal.backend.Backend;
import xianzhan.pascal.intermediate.ICode;
import xianzhan.pascal.intermediate.SymTabStack;
import xianzhan.pascal.message.Message;
import xianzhan.pascal.message.MessageType;

/**
 * <h1>Executor</h1>
 *
 * <p>The executor for an interpreter back end.</p>
 *
 * <p>Copyright (c) 2009 by Ronald Mak</p>
 * <p>For instructional purposes only.  No warranties.</p>
 *
 * @author Ronald Mak
 */
public class Executor extends Backend {
    /**
     * Process the intermediate code and the symbol table generated by the
     * parser to execute the source program.
     *
     * @param iCode       the intermediate code.
     * @param symTabStack the symbol table.
     * @throws Exception if an error occurred.
     */
    @Override
    public void process(ICode iCode, SymTabStack symTabStack) throws Exception {
        long startTime = System.currentTimeMillis();
        float elapsedTime = (System.currentTimeMillis() - startTime) / 1000F;
        int executionCount = 0;
        int runtimeErrors = 0;

        // Send the interpreter summary message.
        Message message = new Message(
                MessageType.INTERPRETER_SUMMARY,
                new Number[]{
                        executionCount,
                        runtimeErrors,
                        elapsedTime
                }
        );
        sendMessage(message);
    }
}
